
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-routing-policy - based on the path /routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for AS path sets
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__as_path_set_name','__as_path_set_member',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__as_path_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-set-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)
    self.__as_path_set_member = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="as-path-set-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-policy', u'defined-sets', u'bgp-defined-sets', u'as-path-sets', u'as-path-set', u'config']

  def _get_as_path_set_name(self):
    """
    Getter method for as_path_set_name, mapped from YANG variable /routing_policy/defined_sets/bgp_defined_sets/as_path_sets/as_path_set/config/as_path_set_name (string)

    YANG Description: name of the AS path set -- this is used to reference
the set in match conditions
    """
    return self.__as_path_set_name
      
  def _set_as_path_set_name(self, v, load=False):
    """
    Setter method for as_path_set_name, mapped from YANG variable /routing_policy/defined_sets/bgp_defined_sets/as_path_sets/as_path_set/config/as_path_set_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_path_set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_path_set_name() directly.

    YANG Description: name of the AS path set -- this is used to reference
the set in match conditions
    """
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="as-path-set-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_path_set_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-set-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)""",
        })

    self.__as_path_set_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_path_set_name(self):
    self.__as_path_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-set-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)


  def _get_as_path_set_member(self):
    """
    Getter method for as_path_set_member, mapped from YANG variable /routing_policy/defined_sets/bgp_defined_sets/as_path_sets/as_path_set/config/as_path_set_member (string)

    YANG Description: AS path expression -- list of ASes in the set
    """
    return self.__as_path_set_member
      
  def _set_as_path_set_member(self, v, load=False):
    """
    Setter method for as_path_set_member, mapped from YANG variable /routing_policy/defined_sets/bgp_defined_sets/as_path_sets/as_path_set/config/as_path_set_member (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_path_set_member is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_path_set_member() directly.

    YANG Description: AS path expression -- list of ASes in the set
    """
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="as-path-set-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_path_set_member must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="as-path-set-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)""",
        })

    self.__as_path_set_member = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_path_set_member(self):
    self.__as_path_set_member = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="as-path-set-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/bgp-policy', defining_module='openconfig-bgp-policy', yang_type='string', is_config=True)

  as_path_set_name = property(_get_as_path_set_name, _set_as_path_set_name)
  as_path_set_member = property(_get_as_path_set_member, _set_as_path_set_member)


  _pyangbind_elements = {'as_path_set_name': as_path_set_name, 'as_path_set_member': as_path_set_member, }


